# This file defines the default (English) variants of all of the internationalised messages

pscanbeta.desc = Passive Scan Rules - beta

pscanbeta.cookiesamesitescanner.name = Cookie Without SameSite Attribute
pscanbeta.cookiesamesitescanner.desc=A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. \
The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
pscanbeta.cookiesamesitescanner.badval=A cookie has been set with an invalid SameSite attribute value, which means that the cookie can be sent as a result of a 'cross-site' request. \
The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
pscanbeta.cookiesamesitescanner.soln=Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.
pscanbeta.cookiesamesitescanner.refs=https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site

pscanbeta.crossdomain.name=Cross-Domain Misconfiguration
pscanbeta.crossdomain.desc=Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server
pscanbeta.crossdomain.soln=Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.
pscanbeta.crossdomain.refs=http://www.hpenterprisesecurity.com/vulncat/en/vulncat/vb/html5_overly_permissive_cors_policy.html
pscanbeta.crossdomain.extrainfo=The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.

pscanbeta.informationdisclosureinurl.name=Information Disclosure - Sensitive Information in URL
pscanbeta.informationdisclosureinurl.desc=The request appeared to contain sensitive information leaked in the URL. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.
pscanbeta.informationdisclosureinurl.otherinfo.sensitiveinfo=The URL contains potentially sensitive information.
pscanbeta.informationdisclosureinurl.otherinfo.cc=The URL appears to contain credit card information.
pscanbeta.informationdisclosureinurl.otherinfo.email=The URL contains email address(es).
pscanbeta.informationdisclosureinurl.otherinfo.ssn=The URL appears to contain US Social Security Number(s)
pscanbeta.informationdisclosureinurl.soln=Do not pass sensitive information in URIs.

pscanbeta.informationdisclosurereferrerscanner.name=Information Disclosure - Sensitive Information in HTTP Referrer Header
pscanbeta.informationdisclosurereferrerscanner.desc=The HTTP header may have leaked a potentially sensitive parameter to another domain. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.
pscanbeta.informationdisclosurereferrerscanner.otherinfo.sensitiveinfo=The URL in the HTTP referrer header field appears to contain sensitive information.
pscanbeta.informationdisclosurereferrerscanner.otherinfo.cc=The URL in the HTTP referrer header field appears to contain credit card information.
pscanbeta.informationdisclosurereferrerscanner.otherinfo.email=The URL in the HTTP referrer header field contains email address(es).
pscanbeta.informationdisclosurereferrerscanner.otherinfo.ssn=The URL in the HTTP referrer header field appears to contain US Social Security Number(s).
pscanbeta.informationdisclosurereferrerscanner.soln=Do not pass sensitive information in URIs.

pscanbeta.informationdisclosuresuspiciouscomments.name=Information Disclosure - Suspicious Comments
pscanbeta.informationdisclosuresuspiciouscomments.desc=The response appears to contain suspicious comments which may help an attacker.
pscanbeta.informationdisclosuresuspiciouscomments.soln=Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.

pscanbeta.servletparameterpollutionscanner.name=HTTP Parameter Override
pscanbeta.servletparameterpollutionscanner.desc=Unspecified form action: HTTP parameter override attack potentially possible. This is a known problem with Java Servlets but other platforms may also be vulnerable.
pscanbeta.servletparameterpollutionscanner.soln=All forms must specify the action URL.
pscanbeta.servletparameterpollutionscanner.refs=http://download.oracle.com/javaee-archive/servlet-spec.java.net/jsr340-experts/att-0317/OnParameterPollutionAttacks.pdf

pscanbeta.timestampdisclosure.name=Timestamp Disclosure
pscanbeta.timestampdisclosure.desc=A timestamp was disclosed by the application/web server
pscanbeta.timestampdisclosure.soln=Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.
pscanbeta.timestampdisclosure.refs=https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanbeta.timestampdisclosure.extrainfo={0}, which evaluates to: {1}

pscanbeta.usernameidor.name = Username Hash Found
pscanbeta.usernameidor.desc = A hash of a username ({0}) was found in the response. This may indicate that the application is subject to an Insecure Direct Object Reference (IDOR) vulnerability. Manual testing will be required to see if this discovery can be abused.
pscanbeta.usernameidor.otherinfo = The hash was an {0}, with value: {1} 
pscanbeta.usernameidor.soln = Use per user or session indirect object references (create a temporary mapping at time of use). Or, ensure that each use of a direct object reference is tied to an authorization check to ensure the user is authorized for the requested object. 
pscanbeta.usernameidor.refs = https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References\nhttps://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004)

pscanbeta.xaspnetversioncanner.name = X-AspNet-Version Response Header Scanner
pscanbeta.xaspnetversioncanner.desc =  Server leaks information via "X-AspNet-Version"/"X-AspNetMvc-Version" HTTP response header field(s).
pscanbeta.xaspnetversioncanner.soln = Configure the server so it will not return those headers.
pscanbeta.xaspnetversioncanner.extrainfo = An attacker can use this information to exploit known vulnerabilities.
pscanbeta.xaspnetversioncanner.refs = https://www.troyhunt.com/shhh-dont-let-your-response-headers/\nhttps://blogs.msdn.microsoft.com/varunm/2013/04/23/remove-unwanted-http-response-headers/

pscanbeta.xdebugtoken.name=X-Debug-Token Information Leak
pscanbeta.xdebugtoken.desc=The response contained an X-Debug-Token or X-Debug-Token-Link header. This indicates that Symfony's Profiler may be in use and exposing sensitive data.
pscanbeta.xdebugtoken.otherinfo=By accessing a URL in the form http://target_host/_profiler/token_value (i.e.: http://example.com/_profiler_/123ab4), you may gain access to the profiler and further leaked information.
pscanbeta.xdebugtoken.refs=https://symfony.com/doc/current/cookbook/profiler/profiling_data.html\nhttps://symfony.com/blog/new-in-symfony-2-4-quicker-access-to-the-profiler-when-working-on-an-api
pscanbeta.xdebugtoken.soln=Limit access to Symfony's Profiler, either via authentication/authorization or limiting inclusion of the header to specific clients (by IP etc).

pscanbeta.xpoweredbyheaderinfoleak.name=Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)
pscanbeta.xpoweredbyheaderinfoleak.desc=The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
pscanbeta.xpoweredbyheaderinfoleak.refs=http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanbeta.xpoweredbyheaderinfoleak.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
pscanbeta.xpoweredbyheaderinfoleak.extrainfo=
pscanbeta.xpoweredbyheaderinfoleak.otherinfo.msg=The following X-Powered-By headers were also found:\r\n
